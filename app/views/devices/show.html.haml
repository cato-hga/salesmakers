- write_off = DeviceState.find_by_name 'Written Off'
- deployed = DeviceState.find_by_name 'Deployed'

= title @device.serial
-if @device.device_states.count > 0
  - states = Array.new
  - @device.device_states.each do |state|
    - states << state.name
  %em= states.join(', ')
.row.full-width
  .large-4.columns
    %h2 Device Information
    = device_image @device
    %p
      %strong Type:
      = @device.model_name
    %p
      %strong Line:
      - if @device.line
        = line_link @device.line
        -if @device.line.line_states.count > 0
          - states = Array.new
          - @device.line.line_states.each do |state|
            - states << state.name
          &mdash;
          %em= states.join(', ')
        %p= line_service_provider_image(@device.line)
      - else
        None
  .large-8.columns
    .actions
      - unless @device.device_states.include? deployed
        = link_to 'Deploy', select_user_lines_and_devices_device_device_deployments_path(@device), class: 'btn btn-primary'
      - if @device.device_states.include? deployed
        %button.btn.btn-success(type="button") Recoup
      - if not @device.device_states.include? write_off and @device.device_states.include? deployed
        %button.btn.btn-danger(type="button") Write Off
    .deployments
      %h2 Deployments
      - if @device.device_deployments.count > 0
        %ul
          - deployment_count = 1
          - for deployment in @device.device_deployments
            %li{class: ('recouped' if deployment.ended.present?)}
              = person_link(deployment.person)
              &mdash;
              = deployment.started.strftime('%m/%d/%Y')
              to
              - if deployment.ended.present?
                = deployment.ended.strftime('%m/%d/%Y')
              - else
                present
              - if @device.device_states.include? write_off and deployment_count == 1
                &mdash;
                %span.red WRITTEN OFF
            - deployment_count = deployment_count + 1
      - else
        %em None
      %hr/
    .history
      - if @log_entries.count > 0
        %h2 History
        - future = Time.now
        - for entry in @log_entries
          .how_long
            = distance_of_time_in_words(entry.created_at, future, include_seconds: false)
            - future = entry.created_at
          = render_log_entry(entry)