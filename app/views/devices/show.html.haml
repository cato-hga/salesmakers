- write_off = DeviceState.find_by_name 'Written Off'
- deployed = DeviceState.find_by_name 'Deployed'

- title @device.serial
- content_for :action_buttons do
  - unless @device.device_states.include? deployed or @device.device_states.include? write_off
    = link_to 'Deploy', select_user_device_device_deployments_path(@device), class: [:button, :inline_button]
  - unless @device.device_states.blank?
    = link_to 'Recoup', recoup_device_device_deployments_path(@device), class: [:button, :inline_button]
  - unless @device.device_states.include? write_off
    = link_to 'Write Off', write_off_device_path(@device), class: [:button, :inline_button]
- if @device.secondary_identifier
  %h3
    Secondary ID:
    = @device.secondary_identifier
.device_states
  - if @device.device_states.count > 0
    - states = Array.new
    - @device.device_states.each do |state|
      - states << state.name
    %em= states.join(', ')
.widgets
  .widget
    .inner
      .centered_text
        = device_image @device
      %p
        %strong Model:
        = @device.model_name
      %p
        %strong Line:
        - if @device.line
          = line_link @device.line
          -if @device.line.line_states.count > 0
            - states = Array.new
            - @device.line.line_states.each do |state|
              - states << state.name
            &mdash;
            %em= states.join(', ')
          .centered_text= line_service_provider_image(@device.line)
        - else
          None
  .widget
    .inner
      .deployments
        %h2 Deployments
        - if @device.device_deployments.count > 0
          %ul
            - deployment_count = 1
            - for deployment in @device.device_deployments
              %li{class: ('recouped' if deployment.ended.present?)}
                = person_link(deployment.person)
                &mdash;
                = deployment.started.strftime('%m/%d/%Y')
                to
                - if deployment.ended.present?
                  = deployment.ended.strftime('%m/%d/%Y')
                - else
                  present
                - if @device.device_states.include? write_off and deployment_count == 1
                  &mdash;
                  %span.red WRITTEN OFF
              - deployment_count = deployment_count + 1
        - else
          %em None
  .widget
    .inner
      .history
        - if @log_entries.count > 0
          %h2 History
          - future = Time.now
          - for entry in @log_entries
            .how_long
              = distance_of_time_in_words(entry.created_at, future, include_seconds: false)
              - future = entry.created_at
            = render_log_entry(entry)
          .clearfix